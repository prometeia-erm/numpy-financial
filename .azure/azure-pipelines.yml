# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

schedules:
- cron: "00 12,0 * * 1-5"
  displayName: Nightly Full Tests
  branches:
    include:
    - release/*
    - hotfix/*
    - develop
  always: false
- cron: "00 22 * * 6"
  displayName: Weekly Security Scan
  branches:
    include:
    - master
    - main
    - support/*
  always: true

pr: none

trigger:
  batch: true
  branches:
    include:
      - '*'
  tags:
    include:
      - 'v*'

resources:
  repositories:
    - repository: TemplatesRepository
      type: github
      endpoint: GitHubConnection
      name: prometeia-erm/mp_azure_templates

parameters:
  - name: test
    displayName: Run Tests?
    type: string
    default: 'fast'
    values:
      - 'fast'
      - 'skip'

variables:
  # App specific
  app: numpy-financial
  buildId: $[counter(variables['Build.SourceBranchName'], 1)]
  projectDir: '$(Build.SourcesDirectory)/${{variables.app}}'
  templatesDir: '$(Build.SourcesDirectory)/mp_azure_templates'

  # Build parameters
  pypiRepoName: 'prometeia'
  pythonPackageArtifact: pythonPackage
  pythonRequirementsArtifact: pythonRequirements

  enableMongodb: false
  publishPackage: ${{ ne(variables['Build.SourceBranch'], 'refs/heads/main') }}

  # Docker parameters
  dockerRegistryService: 'prometeia'
  imageRepository: 'mp/${{variables.app}}'
  containerRegistry: 'prometeia.azurecr.io'
  dockerfilePath: '${{variables.projectDir}}/.azure/Dockerfile'

  # Sonar parameters
  sonarCloudService: 'SonarCloudSC'  # old: 'sonarqube-dev'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


jobs:
- job: checkmarx_scan
  displayName: 'CheckmarX scan'
  steps:
    - task: Checkmarx AST@2
      inputs:
        CheckmarxService: 'Checkmarx One'
        projectName: '$(Build.Repository.Name)'
        branchName: '$(Build.SourceBranchName)'
        additionalParams: "--debug --scan-timeout 120 --scan-types sast,sca,iac-security --file-source ${{variables.projectDir}} --file-include 'Dockerfile,*.py,*.lock,*.toml,*.yaml,*.yml' --sca-filter '!tests/**,!tools/**,*.lock,*.toml' --sast-filter '!tests/**,!tools/**' --iac-security-platforms Dockerfile --iac-security-filter '!tests/**,!tools/**,Dockerfile'"
- job: python_build_test
  displayName: 'Build and test python package'
  variables:
  - group: pypi-secrets
  - group: external-services
  pool:
    vmImage: $(vmImageName)
  steps:
  - checkout: self
    fetchDepth: 0
    persistCredentials: true
  - checkout: TemplatesRepository
  - template: templates/01-setup.yaml@TemplatesRepository
    parameters:
      #poetryVersion: 1.6.1
      #pythonVersion: 3.9
      pypiUrlUpload: $(pypiUrlUpload)
      pypiUsername: $(pypiUsername)
      pypiToken: $(pypiToken)
      repoName:  $(pypiRepoName)
  - template: templates/02-compute-version.yaml@TemplatesRepository
    parameters:
      branch: $(Build.SourceBranch)
      buildNumber: $(buildId)
      projectDir: $(projectDir)
      templatesDir: $(templatesDir)
  - template: templates/03-poetry-cache.yaml@TemplatesRepository
    parameters:
      appId: $(app)
      projectDir: $(projectDir)
  - ${{ if ne(parameters['test'], 'skip') }}:
    - template: templates/04-install-and-test.yaml@TemplatesRepository
      parameters:
        extras: '--all-extras --with=dev'
        deepTests: false
        enableMongodb: ${{ variables.enableMongodb }}
        projectDir: $(projectDir)
  - ${{ if eq(variables['publishPackage'], 'true') }}:
    - template: templates/05-build-and-publish.yaml@TemplatesRepository
      parameters:
        repoName:  $(pypiRepoName)
        projectDir: $(projectDir)
  - template: templates/sonarcloud-setup-and-scan/sonarcloud-setup-and-scan.yaml@TemplatesRepository
    parameters:
      sonarCloudServiceConnection: '${{variables.sonarCloudService}}'
      workingDirectory: '$(projectDir)'
      organization: prometeia-erm
      projectKey: 'erm-mp-${{variables.app}}'
      projectName: 'erm-mp-${{variables.app}}'
      projectBaseDir: '$(projectDir)'
      mainBranchName: main # main, master, it depends on the project repo... (develop doesn't work)
      blockOnQualityGates: false
      debug: true
- job: python_test_311
  displayName: 'Build and test python package'
  variables:
  - group: pypi-secrets
  - group: external-services
  pool:
    vmImage: $(vmImageName)
  steps:
  - checkout: self
    fetchDepth: 1
    persistCredentials: true
  - checkout: TemplatesRepository
  - template: templates/01-setup.yaml@TemplatesRepository
    parameters:
      #poetryVersion: 1.6.1
      pythonVersion: 3.11
      pypiUrlUpload: $(pypiUrlUpload)
      pypiUsername: $(pypiUsername)
      pypiToken: $(pypiToken)
      repoName:  $(pypiRepoName)
  - template: templates/02-compute-version.yaml@TemplatesRepository
    parameters:
      branch: $(Build.SourceBranch)
      buildNumber: $(buildId)
      projectDir: $(projectDir)
      templatesDir: $(templatesDir)
  - template: templates/03-poetry-cache.yaml@TemplatesRepository
    parameters:
      appId: $(app)
      projectDir: $(projectDir)
  - ${{ if ne(parameters['test'], 'skip') }}:
    - template: templates/04-install-and-test.yaml@TemplatesRepository
      parameters:
        extras: '--all-extras --with=dev'
        deepTests: false
        enableMongodb: ${{ variables.enableMongodb }}
        projectDir: $(projectDir)